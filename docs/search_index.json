[["index.html", "Working with large datasets in R ", " Working with large datasets in R Bin Chi 25/3/2021 "],["introduction.html", "1 Introduction", " 1 Introduction This bookdown contains documents for UCL R user group meeting talk (25/3/2021). It aims to introduce some methods on how to work with large datasets in R. The dataset used in this talk is not allowed to be used commercially. They must be shared on the same terms as the data was originally obtained. By the end of the talk you will have: div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Read large CSV files together Tried basic big data munging/wrangling Worked with PostGIS database in R Measured code performance Executed R code in Alteryx "],["recommended-resources.html", "2 Recommended resources 2.1 Resources for handling big data in R 2.2 Resources for the data.table package 2.3 Resources for measuring R performance 2.4 Resources for PostGIS software 2.5 Resources for Alteryx softwware 2.6 Datasets 2.7 Extensions", " 2 Recommended resources 2.1 Resources for handling big data in R Handling large data sets in R Notes: Medium sized datasets (&lt; 2 GB):loaded in R ( within memory limit but processing is cumbersome (typically in the 1-2 GB range ) Large files that cannot be loaded in R due to R / OS limitations Large files(2 - 10 GB):process locally using some work around solutions Very Large files( &gt; 10 GB):needs distributed large scale computing. Five ways to handle Big Data in R Notes: Rule of thumb: Data sets that contain up to one million records can easily processed with standard R. Data sets with about one million to one billion records can also be processed in R, but need some additional effort. Data sets that contain more than one billion records need to be analyzed by map reduce algorithms. Efficient data carpentry Getting Started With Parallel Programming In R Efficiency in Joining Two Data Frames For large tables in R dplyrs function inner_join() is much faster than merge() BASE R, THE TIDYVERSE, AND DATA.TABLE: A COMPARISON OF R DIALECTS TO WRANGLE YOUR DATA Speed comparison of rbind, bind_rows, and rbindlist rbindlist() is the fastest method and rbind() is the slowest. bind_rows() is half as fast as rbindlist() 2.2 Resources for the data.table package Data Transformation with data.table : : CHEAT SHEET A data.table and dplyr tour Blazing Fast Data Wrangling With R data.table data.table in R  The Complete Beginners Guide Advanced tips and tricks with data.table Advanced-Data Wrangling In R  4 R : DATA.TABLE TUTORIAL (WITH 50 EXAMPLES) 2.3 Resources for measuring R performance 5 ways to measure running time of R code Measuring performance Efficient optimisation Profvis  Interactive Visualizations for Profiling R Code Strategies to Speedup R Code R Code Optimizer Strategies to Speedup R Code R Performance Tuning | Learn Tips to Improve Speed &amp; Memory of R Programs 2.4 Resources for PostGIS software About PostGIS Install Postgres/PostGIS and get started with spatial SQL Enabling PostGIS PostGIS is an optional extension that must be enabled in each database you want to use it in before you can use it. 2.5 Resources for Alteryx softwware What is Alteryx? Data Cleansing in Alteryx for Beginners Integrating R in Alteryx Alteryx - Bring Your Own R Code How do I Import &amp; Union Multiple Excel Files with Alteryx The Union tool in Alteryx The unique tool in Alteryx How to Connect Alteryx to PostgreSQL 2.6 Datasets Energy Performance of Buildings Data: England and Wales Land Registry Price Paid Data(PPD) A new attribute-linked residential property price dataset for England and Wales 2011-2019 Scottish Energy Performance Certificate Register Scottish Domestic Energy Performance Certificates Scottish Non-domestic Energy Performance Certificates 2.7 Extensions Big Data: Wrangling 4.6M Rows with dtplyr Big Data Analytics with R R and Hadoop Data Analytics - RHadoop R and Hadoop: Step-by-step tutorials Mastering Spark with R Hadoop Vs Spark - Detailed Comparison GOOGLE "],["getting-started.html", "3 Getting started 3.1 Installing packages 3.2 Loading packages 3.3 Install PostGIS and Alteryx software", " 3 Getting started 3.1 Installing packages If you have installed the below packages already, you can jump to the next step. install.packages(&quot;data.table&quot;) install.packages(&quot;dplyr&quot;) install.packages(&quot;RPostgreSQL&quot;) install.packages(&quot;profvis&quot;) 3.2 Loading packages Load the packages for todays talk library(data.table) library(RPostgreSQL) library(dplyr) library(profvis) 3.3 Install PostGIS and Alteryx software 3.3.1 Install PostGIS Step 1: download the PostgreSQL Step 2: select the right version for your system Step 3: download the installer Step 4: download the software Step 5: install the PostgreSQL Step 6: set the password Step 7: select the port number Step 8: click the Stack Builder Step 9: choose the PostgreSQL for additional installation Step 10: install the spatial extension Step 11: create a postGIS database Step 12: Enter the password Step 13: set the database name Step 14: Finish You will find a PostGIS database names as casa in your postgreSQL The second approch: create a database in PostgreSQL + extent it to PostGIS database (Enabling PostGIS) 3.3.2 Install Alteryx For academics, students, nonprofits institutes, you can install the Alteryx for free through Alteryx for Good. Step 1: Apply the Alteryx For Good License Step 2: Click the Alteryx Designer in Product Downloads Step 3: click the Alteryx Designer (2021.1) Step 4: download the Alteryx Designer and Alteryx Predictive Tools "],["working-with-big-data-in-r.html", "4 Working with big data in R 4.1 Read in CSV files 4.2 Basic larger dataset munging/wrangling 4.3 Work with PostGIS database in R 4.4 Measure code performance 4.5 Execute R code in Alteryx", " 4 Working with big data in R 4.1 Read in CSV files 4.1.1 Read one large CSV file 4.1.1.1 Read a CSV file with header library(data.table) ##It will take around 3 mins to read in 5,732,838 records with 105 variables tran2&lt;-fread(&quot;tranall2011_19.csv&quot;) 4.1.1.2 Read a CSV file without header tran2&lt;-fread(&quot;tranall2011_19.csv&quot;,header=F) 4.1.1.3 Read a CSV file with the second row as header and dropping the first row epcdata1&lt;-fread(&quot;D_EPC_data_2012_Q4_extract_0221.csv&quot;, skip = 1) epcdata14&lt;-read.csv(&quot;D_EPC_data_2020_Q4_extract_0221.csv&quot;, skip = 1) 4.1.2 Fast reading multiple EPC csv files together in R 4.1.2.1 Code for reading in EPCs in England and Wales ## assume all the unzipped EPC stored in EPC folder in D drive x1 &lt;- list.files(path = &quot;.&quot;, pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE) datalist &lt;- paste(&quot;D:/EPC&quot;,x1,&quot;certificates.csv&quot;,sep=&quot;/&quot;) epcdata = data.table::rbindlist(lapply(datalist, data.table::fread, showProgress = FALSE)) 4.1.2.2 Code for reading in EPCs in Scotland datalist = list.files(pattern=&quot;*.csv&quot;) epcdata = data.table::rbindlist(lapply(datalist, data.table::fread, skip=1,showProgress = FALSE)) 4.2 Basic larger dataset munging/wrangling 4.2.1 Select columns class(tran2) ## [1] &quot;data.table&quot; &quot;data.frame&quot; needlist&lt;-c(&quot;transactionid&quot;,&quot;postcode&quot;,&quot;price&quot;,&quot;dateoftransfer&quot;,&quot;propertytype&quot;,&quot;laua&quot;,&quot;lad11nm&quot;,&quot;tfarea&quot;,&quot;priceper&quot;,&quot;TRANSACTION_TYPE&quot;) tran2&lt;-tran2[,..needlist] head(tran2) ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper ## 1: {5F2B8B60-B9D0-4F00-8561-8BBF0C991BE1} KT22 7LN 187250 2014-07-11 F E07000210 Mole Valley 46 4070.652 ## 2: {5F54B81D-B8BA-2B45-E053-6B04A8C01FB0} RH4 3QR 394000 2017-10-23 T E07000210 Mole Valley 77 5116.883 ## 3: {F5CB911D-B4EF-4F74-A696-1131D46A1019} KT21 2LJ 447000 2013-10-24 S E07000210 Mole Valley 139 3215.827 ## 4: {47844C80-5285-8986-E050-A8C063056488} KT22 7TQ 700700 2017-01-23 D E07000210 Mole Valley 148 4734.459 ## 5: {666758D7-4CCD-3363-E053-6B04A8C0D74E} KT21 2DJ 350000 2018-01-03 F E07000210 Mole Valley 63 5555.556 ## 6: {288DCE29-B9CB-E510-E050-A8C06205480E} KT22 7DX 135000 2015-10-20 F E07000210 Mole Valley 44 3068.182 ## TRANSACTION_TYPE ## 1: rental (private) ## 2: marketed sale ## 3: marketed sale ## 4: marketed sale ## 5: marketed sale ## 6: marketed sale 4.2.2 Changing column names to lower case or upper case 4.2.2.1 Changing column names to lower case setnames(tran2, tolower(names(tran2))) head(tran2) ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper ## 1: {5F2B8B60-B9D0-4F00-8561-8BBF0C991BE1} KT22 7LN 187250 2014-07-11 F E07000210 Mole Valley 46 4070.652 ## 2: {5F54B81D-B8BA-2B45-E053-6B04A8C01FB0} RH4 3QR 394000 2017-10-23 T E07000210 Mole Valley 77 5116.883 ## 3: {F5CB911D-B4EF-4F74-A696-1131D46A1019} KT21 2LJ 447000 2013-10-24 S E07000210 Mole Valley 139 3215.827 ## 4: {47844C80-5285-8986-E050-A8C063056488} KT22 7TQ 700700 2017-01-23 D E07000210 Mole Valley 148 4734.459 ## 5: {666758D7-4CCD-3363-E053-6B04A8C0D74E} KT21 2DJ 350000 2018-01-03 F E07000210 Mole Valley 63 5555.556 ## 6: {288DCE29-B9CB-E510-E050-A8C06205480E} KT22 7DX 135000 2015-10-20 F E07000210 Mole Valley 44 3068.182 ## transaction_type ## 1: rental (private) ## 2: marketed sale ## 3: marketed sale ## 4: marketed sale ## 5: marketed sale ## 6: marketed sale 4.2.2.2 Changing column names to upper case setnames(tran2, toupper(names(tran2))) 4.2.3 Filter rows based on conditions tran2[laua==&quot;E09000007&quot;, ] ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper ## 1: {CF95606A-595A-48F5-92CB-708D24CAFC58} NW3 7NL 1956000 2014-10-07 T E09000007 Camden 175.00 11177.143 ## 2: {4EA5C667-79EF-4FF4-839D-5344F6F46842} NW2 2BT 3599000 2012-11-05 D E09000007 Camden 402.00 8952.736 ## 3: {7EE393AB-3710-4D5D-AE60-7260ADFDEE54} NW3 7NL 1310000 2011-05-17 T E09000007 Camden 193.00 6787.565 ## 4: {7E86B6FB-16FC-458C-E053-6B04A8C0C84C} NW3 7NL 2100000 2018-11-16 T E09000007 Camden 193.00 10880.829 ## 5: {E33626A9-DCD2-4D65-AF98-33D8BC99D1FD} NW3 5PT 685000 2011-04-20 F E09000007 Camden 80.46 8513.547 ## --- ## 13775: {13521672-6024-48B3-BACE-B2CCD6280078} NW8 7ED 5610000 2015-07-17 F E09000007 Camden 240.00 23375.000 ## 13776: {ED4810A9-BC16-49FF-9C6B-844F5E569704} NW8 7ED 6700000 2015-07-01 F E09000007 Camden 287.00 23344.948 ## 13777: {EEDA2760-FB8A-4D56-96B2-A0934B38D6BB} NW8 7ED 9494000 2015-07-01 F E09000007 Camden 313.00 30332.268 ## 13778: {773788C2-F00D-2CE4-E053-6C04A8C05E57} NW8 7ED 4000000 2018-09-07 F E09000007 Camden 145.00 27586.207 ## 13779: {25EA59F9-FEAC-4D50-E050-A8C0630562D0} NW8 7ED 3725000 2015-09-30 F E09000007 Camden 145.00 25689.655 ## transaction_type ## 1: marketed sale ## 2: rental (private) ## 3: marketed sale ## 4: marketed sale ## 5: marketed sale ## --- ## 13775: marketed sale ## 13776: marketed sale ## 13777: marketed sale ## 13778: marketed sale ## 13779: marketed sale Camden&lt;-tran2[laua==&quot;E09000007&quot;, ] head(Camden) ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper ## 1: {CF95606A-595A-48F5-92CB-708D24CAFC58} NW3 7NL 1956000 2014-10-07 T E09000007 Camden 175.00 11177.143 ## 2: {4EA5C667-79EF-4FF4-839D-5344F6F46842} NW2 2BT 3599000 2012-11-05 D E09000007 Camden 402.00 8952.736 ## 3: {7EE393AB-3710-4D5D-AE60-7260ADFDEE54} NW3 7NL 1310000 2011-05-17 T E09000007 Camden 193.00 6787.565 ## 4: {7E86B6FB-16FC-458C-E053-6B04A8C0C84C} NW3 7NL 2100000 2018-11-16 T E09000007 Camden 193.00 10880.829 ## 5: {E33626A9-DCD2-4D65-AF98-33D8BC99D1FD} NW3 5PT 685000 2011-04-20 F E09000007 Camden 80.46 8513.547 ## 6: {AFE46158-BA70-4FAF-999D-70D94F0322F9} WC1H 0LP 255000 2012-11-23 F E09000007 Camden 26.00 9807.692 ## transaction_type ## 1: marketed sale ## 2: rental (private) ## 3: marketed sale ## 4: marketed sale ## 5: marketed sale ## 6: marketed sale 4.2.4 Add in the ID column Camden[,tranid := .I] head(Camden) ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper ## 1: {CF95606A-595A-48F5-92CB-708D24CAFC58} NW3 7NL 1956000 2014-10-07 T E09000007 Camden 175.00 11177.143 ## 2: {4EA5C667-79EF-4FF4-839D-5344F6F46842} NW2 2BT 3599000 2012-11-05 D E09000007 Camden 402.00 8952.736 ## 3: {7EE393AB-3710-4D5D-AE60-7260ADFDEE54} NW3 7NL 1310000 2011-05-17 T E09000007 Camden 193.00 6787.565 ## 4: {7E86B6FB-16FC-458C-E053-6B04A8C0C84C} NW3 7NL 2100000 2018-11-16 T E09000007 Camden 193.00 10880.829 ## 5: {E33626A9-DCD2-4D65-AF98-33D8BC99D1FD} NW3 5PT 685000 2011-04-20 F E09000007 Camden 80.46 8513.547 ## 6: {AFE46158-BA70-4FAF-999D-70D94F0322F9} WC1H 0LP 255000 2012-11-23 F E09000007 Camden 26.00 9807.692 ## transaction_type tranid ## 1: marketed sale 1 ## 2: rental (private) 2 ## 3: marketed sale 3 ## 4: marketed sale 4 ## 5: marketed sale 5 ## 6: marketed sale 6 #Camden[, tranid := .I+1000000] 4.2.5 Convert datatable values to uppercase Camden[, `:=`(tran_type = toupper(transaction_type))] head(Camden) ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper ## 1: {CF95606A-595A-48F5-92CB-708D24CAFC58} NW3 7NL 1956000 2014-10-07 T E09000007 Camden 175.00 11177.143 ## 2: {4EA5C667-79EF-4FF4-839D-5344F6F46842} NW2 2BT 3599000 2012-11-05 D E09000007 Camden 402.00 8952.736 ## 3: {7EE393AB-3710-4D5D-AE60-7260ADFDEE54} NW3 7NL 1310000 2011-05-17 T E09000007 Camden 193.00 6787.565 ## 4: {7E86B6FB-16FC-458C-E053-6B04A8C0C84C} NW3 7NL 2100000 2018-11-16 T E09000007 Camden 193.00 10880.829 ## 5: {E33626A9-DCD2-4D65-AF98-33D8BC99D1FD} NW3 5PT 685000 2011-04-20 F E09000007 Camden 80.46 8513.547 ## 6: {AFE46158-BA70-4FAF-999D-70D94F0322F9} WC1H 0LP 255000 2012-11-23 F E09000007 Camden 26.00 9807.692 ## transaction_type tranid tran_type ## 1: marketed sale 1 MARKETED SALE ## 2: rental (private) 2 RENTAL (PRIVATE) ## 3: marketed sale 3 MARKETED SALE ## 4: marketed sale 4 MARKETED SALE ## 5: marketed sale 5 MARKETED SALE ## 6: marketed sale 6 MARKETED SALE 4.2.6 Delete columns Camden[,transaction_type:=NULL] head(Camden) ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper ## 1: {CF95606A-595A-48F5-92CB-708D24CAFC58} NW3 7NL 1956000 2014-10-07 T E09000007 Camden 175.00 11177.143 ## 2: {4EA5C667-79EF-4FF4-839D-5344F6F46842} NW2 2BT 3599000 2012-11-05 D E09000007 Camden 402.00 8952.736 ## 3: {7EE393AB-3710-4D5D-AE60-7260ADFDEE54} NW3 7NL 1310000 2011-05-17 T E09000007 Camden 193.00 6787.565 ## 4: {7E86B6FB-16FC-458C-E053-6B04A8C0C84C} NW3 7NL 2100000 2018-11-16 T E09000007 Camden 193.00 10880.829 ## 5: {E33626A9-DCD2-4D65-AF98-33D8BC99D1FD} NW3 5PT 685000 2011-04-20 F E09000007 Camden 80.46 8513.547 ## 6: {AFE46158-BA70-4FAF-999D-70D94F0322F9} WC1H 0LP 255000 2012-11-23 F E09000007 Camden 26.00 9807.692 ## tranid tran_type ## 1: 1 MARKETED SALE ## 2: 2 RENTAL (PRIVATE) ## 3: 3 MARKETED SALE ## 4: 4 MARKETED SALE ## 5: 5 MARKETED SALE ## 6: 6 MARKETED SALE 4.2.7 Remove Duplicates dim(Camden) ## [1] 13779 11 unique(Camden) ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper ## 1: {CF95606A-595A-48F5-92CB-708D24CAFC58} NW3 7NL 1956000 2014-10-07 T E09000007 Camden 175.00 11177.143 ## 2: {4EA5C667-79EF-4FF4-839D-5344F6F46842} NW2 2BT 3599000 2012-11-05 D E09000007 Camden 402.00 8952.736 ## 3: {7EE393AB-3710-4D5D-AE60-7260ADFDEE54} NW3 7NL 1310000 2011-05-17 T E09000007 Camden 193.00 6787.565 ## 4: {7E86B6FB-16FC-458C-E053-6B04A8C0C84C} NW3 7NL 2100000 2018-11-16 T E09000007 Camden 193.00 10880.829 ## 5: {E33626A9-DCD2-4D65-AF98-33D8BC99D1FD} NW3 5PT 685000 2011-04-20 F E09000007 Camden 80.46 8513.547 ## --- ## 13775: {13521672-6024-48B3-BACE-B2CCD6280078} NW8 7ED 5610000 2015-07-17 F E09000007 Camden 240.00 23375.000 ## 13776: {ED4810A9-BC16-49FF-9C6B-844F5E569704} NW8 7ED 6700000 2015-07-01 F E09000007 Camden 287.00 23344.948 ## 13777: {EEDA2760-FB8A-4D56-96B2-A0934B38D6BB} NW8 7ED 9494000 2015-07-01 F E09000007 Camden 313.00 30332.268 ## 13778: {773788C2-F00D-2CE4-E053-6C04A8C05E57} NW8 7ED 4000000 2018-09-07 F E09000007 Camden 145.00 27586.207 ## 13779: {25EA59F9-FEAC-4D50-E050-A8C0630562D0} NW8 7ED 3725000 2015-09-30 F E09000007 Camden 145.00 25689.655 ## tranid tran_type ## 1: 1 MARKETED SALE ## 2: 2 RENTAL (PRIVATE) ## 3: 3 MARKETED SALE ## 4: 4 MARKETED SALE ## 5: 5 MARKETED SALE ## --- ## 13775: 13775 MARKETED SALE ## 13776: 13776 MARKETED SALE ## 13777: 13777 MARKETED SALE ## 13778: 13778 MARKETED SALE ## 13779: 13779 MARKETED SALE dim(Camden) ## [1] 13779 11 4.2.8 Write files fwrite(Camden,&quot;Camden.csv&quot;) 4.2.9 Bind datasets # Bind by names class(epcdata1) ## [1] &quot;data.table&quot; &quot;data.frame&quot; class(epcdata14) ## [1] &quot;data.frame&quot; # Convert data.frame to data.table setDT(epcdata14) # Select columns needlist&lt;- c(&quot;BUILDING_REFERENCE_NUMBER&quot;,&quot;OSG_REFERENCE_NUMBER&quot;,&quot;ADDRESS1&quot;,&quot;ADDRESS2&quot;,&quot;ADDRESS3&quot;,&quot;POSTCODE&quot;,&quot;INSPECTION_DATE&quot;,&quot;LODGEMENT_DATE&quot;,&quot;PROPERTY_TYPE&quot;,&quot;TYPE_OF_ASSESSMENT&quot;,&quot;TRANSACTION_TYPE&quot;,&quot;TOTAL_FLOOR_AREA&quot;,&quot;NUMBER_HABITABLE_ROOMS&quot;,&quot;CURRENT_ENERGY_EFFICIENCY&quot;,&quot;POTENTIAL_ENERGY_EFFICIENCY&quot;) epcdata1&lt;-epcdata1[,..needlist] epcdata14&lt;-epcdata14[,..needlist] # Bind by names l = list(epcdata1,epcdata14) epc&lt;- rbindlist(l, use.names=TRUE) # Remove Duplicates dim(epc) ## [1] 61640 15 unique(epc) ## BUILDING_REFERENCE_NUMBER OSG_REFERENCE_NUMBER ADDRESS1 ADDRESS2 ADDRESS3 POSTCODE ## 1: 1001856748 118173704 21 CERES PLACE MOTHERWELL ML1 3WE ## 2: 1234570127 119007574 FLAT 1-1 1 Castle Mansions GOUROCK PA19 1PE ## 3: 1234570183 126006147 21 NORTH MIDDLETON DRIVE LARGS KA30 9JW ## 4: 1001220426 136024183 43 SKAITHMUIR CRESCENT FALKIRK FK2 8BP ## 5: 1234570199 200000000000 17 Lambie Street Bathgate EH47 0HH ## --- ## 61636: 1001582626 9051120275 FLAT 1 ALBURY VIEW FONTHILL ROAD ABERDEEN AB11 6TE ## 61637: 1001029287 9051116958 FLAT 4 35 CHESTNUT ROW ABERDEEN AB25 3SE ## 61638: 1000902315 9051116437 FLAT 4 63 ROSEMOUNT PLACE ABERDEEN AB25 2XL ## 61639: 1002090505 130142732 CORRAN SHIELDAIG STRATHCARRON IV54 8XN ## 61640: 1000232247 906700000000 FLAT 3/2 980 ARGYLE STREET GLASGOW G3 8LU ## INSPECTION_DATE LODGEMENT_DATE PROPERTY_TYPE TYPE_OF_ASSESSMENT TRANSACTION_TYPE TOTAL_FLOOR_AREA ## 1: 28/09/2012 01/10/2012 Flat RdSAP, existing dwelling marketed sale 72 ## 2: 28/09/2012 01/10/2012 Bungalow RdSAP, existing dwelling marketed sale 61 ## 3: 28/09/2012 01/10/2012 House RdSAP, existing dwelling marketed sale 110 ## 4: 19/09/2012 01/10/2012 House RdSAP, existing dwelling rental 98 ## 5: 28/09/2012 01/10/2012 House RdSAP, existing dwelling rental 78 ## --- ## 61636: 30/12/2020 31/12/2020 Flat RdSAP, existing dwelling rental 58 ## 61637: 30/12/2020 31/12/2020 Flat RdSAP, existing dwelling rental 37 ## 61638: 30/12/2020 31/12/2020 Flat RdSAP, existing dwelling rental 43 ## 61639: 30/12/2020 31/12/2020 House RdSAP, existing dwelling none of the above 156 ## 61640: 24/12/2020 31/12/2020 Flat RdSAP, existing dwelling rental 62 ## NUMBER_HABITABLE_ROOMS CURRENT_ENERGY_EFFICIENCY POTENTIAL_ENERGY_EFFICIENCY ## 1: 3 77 79 ## 2: 3 64 90 ## 3: 5 60 80 ## 4: 5 70 84 ## 5: 3 50 82 ## --- ## 61636: 4 73 77 ## 61637: 2 72 77 ## 61638: 2 59 75 ## 61639: 7 27 83 ## 61640: 3 56 78 dim(epc) ## [1] 61640 15 4.3 Work with PostGIS database in R 4.3.1 Write files to PostGIS # Loads the PostgreSQL driver drv &lt;- dbDriver(&quot;PostgreSQL&quot;) # Creates a connection to the casa postGIS databas con &lt;- dbConnect(drv, dbname = &quot;casa&quot;,port=5432, user=&quot;postgres&quot;,password=******) # Write Camden to the database dbWriteTable(con, &quot;Camden&quot;,value=Camden, append = TRUE, row.names = FALSE) # Delete some objects from workspace rm(Camden,tran2,epc,epcdata1,epcdata14,epcdata) 4.3.2 Read files from PostGIS drv &lt;- dbDriver(&quot;PostgreSQL&quot;) con &lt;- dbConnect(drv, dbname = &quot;casa&quot;,port=5432, user=&quot;postgres&quot;,password=******) # load the data from PostGIS database tran&lt;- dbGetQuery(con,&quot;select * from Camden&quot;) 4.4 Measure code performance 4.4.1 Measure running time of the code class(epc) ## [1] &quot;data.table&quot; &quot;data.frame&quot; # Delete the epc object rm(epc) # Bind by names start_time &lt;- Sys.time() epc&lt;-rbindlist(list(epcdata1,epcdata14),use.names=TRUE) end_time &lt;- Sys.time() end_time - start_time ## Time difference of 0.06696296 secs # Convert data.table to data.frame setDF(epcdata1) setDF(epcdata14) # Combine two data frames by rows start_time &lt;- Sys.time() epcdata&lt;-rbind(epcdata1,epcdata14) end_time &lt;- Sys.time() end_time - start_time ## Time difference of 0.07813215 secs # Convert data.frame to data.table setDT(epcdata14) setDT(epcdata1) # Combine two data tables by position start_time &lt;- Sys.time() epc&lt;-rbindlist(list(epcdata1,epcdata14)) end_time &lt;- Sys.time() end_time - start_time ## Time difference of 0.0624969 secs 4.4.2 profvis- an interactive profile visualizations profvis({ uniqueresult &lt;- function(x){ dt &lt;- as.data.table(x) esummary&lt;-dt[,.(count=.N),by=epcdataid] idd1 &lt;- esummary[esummary$count==1,] result1 &lt;- x[x$epcdataid %in% idd1$epcdataid,] return(result1) } function1&lt;- function(x,y){ x&lt;-x[is.na(x$saotext),] x&lt;-x[is.na(x$subbuildingname),] x$bnstreet &lt;- paste(x$buildingnumber,x$streetdescription,sep=&quot;, &quot;) x$bnstreet &lt;- gsub(&quot; &quot;, &quot;&quot;, x$bnstreet) x$addressf &lt;- paste(x$postcodelocator,x$bnstreet,sep=&quot;, &quot;) y$addressfinal &lt;- trimws(y$add) y$addressfinal &lt;- gsub(&quot; &quot;, &quot;&quot;, y$addressfinal) y$addressf &lt;- paste(y$postcode,y$addressfinal,sep=&quot;, &quot;) taba1 &lt;- inner_join(x,y,by=&quot;addressf&quot;) return(taba1) } link1&lt;-function1(add,epc) dim(link1) link1u&lt;- uniqueresult(link1) dim(link1u) }) 4.5 Execute R code in Alteryx Step 1: build a workflow in Alteryx Step 2: create R code in the Alteryx Step 3: Click the use AMP engine and run the workflow Step 4: Finish Notes: If you have any questions about Alteryx, Steve at Billigence would like to help. "],["q-a.html", "Q &amp; A Thanks for your listening!", " Q &amp; A Thanks for your listening! "]]
