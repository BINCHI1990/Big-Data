[["index.html", "Working with large datasets in R ", " Working with large datasets in R Bin Chi 25/3/2021 "],["introduction.html", "1 Introduction", " 1 Introduction This bookdown contains documents for UCL R user group meeting talk (25/3/2021). It aims to introduces some methods on how to work with large datasets in R. The dataset used in this talk is not allowed to be used commercially. They must be shared on the same terms as the data was originally obtained. By the end of the talk you will have: div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Read large CSV files together Tried basic big data munging/wrangling Worked with PostGIS database in R Measured code performance Executed R code in Alteryx "],["recommended-resources.html", "2 Recommended resources 2.1 Resources for handling big data in R 2.2 Resources for the data.table package 2.3 Resouces for dtplyr package 2.4 Resources for measuring R performance 2.5 Resources for PostGIS software 2.6 Resources for Alteryx softwware 2.7 Datasets", " 2 Recommended resources 2.1 Resources for handling big data in R Handling large data sets in R Notes: Medium sized datasets (&lt; 2 GB):loaded in R ( within memory limit but processing is cumbersome (typically in the 1-2 GB range ) Large files that cannot be loaded in R due to R / OS limitations Large files(2 - 10 GB):process locally using some work around solutions Very Large files( &gt; 10 GB):needs distributed large scale computing. Five ways to handle Big Data in R Notes: Rule of thumb: Data sets that contain up to one million records can easily processed with standard R. Data sets with about one million to one billion records can also be processed in R, but need some additional effort. Data sets that contain more than one billion records need to be analyzed by map reduce algorithms. Efficient data carpentry Big Data Analytics with R R Performance Tuning | Learn Tips to Improve Speed &amp; Memory of R Programs Getting Started With Parallel Programming In R Efficiency in Joining Two Data Frames For large tables in R dplyrs function inner_join() is much faster than merge() BASE R, THE TIDYVERSE, AND DATA.TABLE: A COMPARISON OF R DIALECTS TO WRANGLE YOUR DATA Speed comparison of rbind, bind_rows, and rbindlist 2.2 Resources for the data.table package - Data Transformation with data.table : : CHEAT SHEET - A data.table and dplyr tour - Blazing Fast Data Wrangling With R data.table data.table in R  The Complete Beginners Guide Advanced tips and tricks with data.table Advanced-Data Wrangling In R  4 R : DATA.TABLE TUTORIAL (WITH 50 EXAMPLES) 2.3 Resouces for dtplyr package - Big Data: Wrangling 4.6M Rows with dtplyr - GOOGLE 2.4 Resources for measuring R performance - Measuring performance Strategies to Speedup R Code R Code Optimizer Strategies to Speedup R Code 2.5 Resources for PostGIS software - About PostGIS Install Postgres/PostGIS and get started with spatial SQL Enabling PostGIS PostGIS is an optional extension that must be enabled in each database you want to use it in before you can use it. 2.6 Resources for Alteryx softwware - What is Alteryx? Data Cleansing in Alteryx for Beginners Integrating R in Alteryx Alteryx - Bring Your Own R Code How do I Import &amp; Union Multiple Excel Files with Alteryx The Union tool in Alteryx The unique tool in Alteryx How to Connect Alteryx to PostgreSQL 2.7 Datasets - Energy Performance of Buildings Data: England and Wales Land Registry Price Paid Data(PPD) A new attribute-linked residential property price dataset for England and Wales 2011-2019 Scottish Energy Performance Certificate Register Scottish Domestic Energy Performance Certificates Scottish Non-domestic Energy Performance Certificates "],["getting-started.html", "3 Getting started 3.1 Installing packages 3.2 Loading packages 3.3 Install PostGIS and Alteryx software", " 3 Getting started 3.1 Installing packages If you have installed the below packages already, you can jump to the next step. #install.packages(&quot;data.table&quot;) #install.packages(&quot;dplyr&quot;) #install.packages(&quot;RPostgreSQL&quot;) 3.2 Loading packages Load the packages for todays talk library(data.table) #library(dtplyr) library(sqldf) library(RPostgreSQL) library(dplyr) 3.3 Install PostGIS and Alteryx software 3.3.1 Install PostGIS Step 1: download the PostgreSQL Step 2: select the right version for your system Step 3: download the installer Step 4: download the software Step 5: install the PostgreSQL Step 6: set the password Step 7: select the port number Step 8: click the Stack Builder Step 9: choose the PostgreSQL for additional installation Step 10: install the spatial extension Step 10: create a postGIS database Step 12: Enter the password Step 13: set the database name Step 14: Finish You will find a PostGIS database names as casa in your postgreSQL Note: you can firstly create a database in PostgreSQL and then extent it to PostGIS database(Enabling PostGIS) 3.3.2 Install Alteryx For academics, students, nonprofits institutes, you can install the Alteryx for free through Alteryx for Good. Step 1: Apply the Alteryx For Good License Step 2: Click the Alteryx Designer in Product Downloads Step 3: click the Alteryx Designer (2021.1) Step 4: download the Alteryx Designer and Alteryx Predictive Tools "],["working-with-big-data-in-r.html", "4 Working with big data in R 4.1 Read in CSV files 4.2 Basic larger dataset munging/wrangling 4.3 Work with PostGIS database in R 4.4 Measure code performance 4.5 Execute R code in Alteryx", " 4 Working with big data in R 4.1 Read in CSV files 4.1.1 Read one large CSV file Read a CSV file with header library(data.table) ##It will take around 3 mins to read in 5,732,838 records with 105 variables tran2&lt;-fread(&quot;tranall2011_19.csv&quot;) Read a CSV file without header tran2&lt;-fread(&quot;tranall2011_19.csv&quot;,header=F) Read a CSV file with the second row as header and dropping the first row epcdata1&lt;-fread(&quot;D_EPC_data_2012_Q4_extract_0221.csv&quot;, skip = 1) epcdata14&lt;-read.csv(&quot;D_EPC_data_2020_Q4_extract_0221.csv&quot;, skip = 1) 4.1.2 Fast reading multiple EPC csv files together in R Code for reading in EPCs in England and Wales ## assume all the unzipped EPC stored in EPC folder in D drive x1 &lt;- list.files(path = &quot;.&quot;, pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE) datalist &lt;- paste(&quot;D:/EPC&quot;,x1,&quot;certificates.csv&quot;,sep=&quot;/&quot;) epcdata = data.table::rbindlist(lapply(datalist, data.table::fread, showProgress = FALSE)) Code for reading in EPCs in Scotland datalist = list.files(pattern=&quot;*.csv&quot;) epcdata = data.table::rbindlist(lapply(datalist, data.table::fread, skip=1,showProgress = FALSE)) 4.2 Basic larger dataset munging/wrangling 4.2.1 Select columns class(tran2) ## [1] &quot;data.table&quot; &quot;data.frame&quot; needlist&lt;-c(&quot;transactionid&quot;,&quot;postcode&quot;,&quot;price&quot;,&quot;dateoftransfer&quot;,&quot;propertytype&quot;,&quot;laua&quot;,&quot;lad11nm&quot;,&quot;tfarea&quot;,&quot;priceper&quot;,&quot;TRANSACTION_TYPE&quot;) tran2&lt;-tran2[,..needlist] head(tran2) ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper TRANSACTION_TYPE ## 1: {5F2B8B60-B9D0-4F00-8561-8BBF0C991BE1} KT22 7LN 187250 2014-07-11 F E07000210 Mole Valley 46 4070.652 rental (private) ## 2: {5F54B81D-B8BA-2B45-E053-6B04A8C01FB0} RH4 3QR 394000 2017-10-23 T E07000210 Mole Valley 77 5116.883 marketed sale ## 3: {F5CB911D-B4EF-4F74-A696-1131D46A1019} KT21 2LJ 447000 2013-10-24 S E07000210 Mole Valley 139 3215.827 marketed sale ## 4: {47844C80-5285-8986-E050-A8C063056488} KT22 7TQ 700700 2017-01-23 D E07000210 Mole Valley 148 4734.459 marketed sale ## 5: {666758D7-4CCD-3363-E053-6B04A8C0D74E} KT21 2DJ 350000 2018-01-03 F E07000210 Mole Valley 63 5555.556 marketed sale ## 6: {288DCE29-B9CB-E510-E050-A8C06205480E} KT22 7DX 135000 2015-10-20 F E07000210 Mole Valley 44 3068.182 marketed sale 4.2.2 Changing column names to lower case or upper case 4.2.2.1 Changing column names to lower case setnames(tran2, tolower(names(tran2))) head(tran2) ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper transaction_type ## 1: {5F2B8B60-B9D0-4F00-8561-8BBF0C991BE1} KT22 7LN 187250 2014-07-11 F E07000210 Mole Valley 46 4070.652 rental (private) ## 2: {5F54B81D-B8BA-2B45-E053-6B04A8C01FB0} RH4 3QR 394000 2017-10-23 T E07000210 Mole Valley 77 5116.883 marketed sale ## 3: {F5CB911D-B4EF-4F74-A696-1131D46A1019} KT21 2LJ 447000 2013-10-24 S E07000210 Mole Valley 139 3215.827 marketed sale ## 4: {47844C80-5285-8986-E050-A8C063056488} KT22 7TQ 700700 2017-01-23 D E07000210 Mole Valley 148 4734.459 marketed sale ## 5: {666758D7-4CCD-3363-E053-6B04A8C0D74E} KT21 2DJ 350000 2018-01-03 F E07000210 Mole Valley 63 5555.556 marketed sale ## 6: {288DCE29-B9CB-E510-E050-A8C06205480E} KT22 7DX 135000 2015-10-20 F E07000210 Mole Valley 44 3068.182 marketed sale 4.2.2.2 Changing column names to upper case setnames(tran2, toupper(names(tran2))) 4.2.3 Filter rows based on conditions tran2[laua==&quot;E09000007&quot;, ] ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper transaction_type ## 1: {CF95606A-595A-48F5-92CB-708D24CAFC58} NW3 7NL 1956000 2014-10-07 T E09000007 Camden 175.00 11177.143 marketed sale ## 2: {4EA5C667-79EF-4FF4-839D-5344F6F46842} NW2 2BT 3599000 2012-11-05 D E09000007 Camden 402.00 8952.736 rental (private) ## 3: {7EE393AB-3710-4D5D-AE60-7260ADFDEE54} NW3 7NL 1310000 2011-05-17 T E09000007 Camden 193.00 6787.565 marketed sale ## 4: {7E86B6FB-16FC-458C-E053-6B04A8C0C84C} NW3 7NL 2100000 2018-11-16 T E09000007 Camden 193.00 10880.829 marketed sale ## 5: {E33626A9-DCD2-4D65-AF98-33D8BC99D1FD} NW3 5PT 685000 2011-04-20 F E09000007 Camden 80.46 8513.547 marketed sale ## --- ## 13775: {13521672-6024-48B3-BACE-B2CCD6280078} NW8 7ED 5610000 2015-07-17 F E09000007 Camden 240.00 23375.000 marketed sale ## 13776: {ED4810A9-BC16-49FF-9C6B-844F5E569704} NW8 7ED 6700000 2015-07-01 F E09000007 Camden 287.00 23344.948 marketed sale ## 13777: {EEDA2760-FB8A-4D56-96B2-A0934B38D6BB} NW8 7ED 9494000 2015-07-01 F E09000007 Camden 313.00 30332.268 marketed sale ## 13778: {773788C2-F00D-2CE4-E053-6C04A8C05E57} NW8 7ED 4000000 2018-09-07 F E09000007 Camden 145.00 27586.207 marketed sale ## 13779: {25EA59F9-FEAC-4D50-E050-A8C0630562D0} NW8 7ED 3725000 2015-09-30 F E09000007 Camden 145.00 25689.655 marketed sale Camden&lt;-tran2[laua==&quot;E09000007&quot;, ] head(Camden) ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper transaction_type ## 1: {CF95606A-595A-48F5-92CB-708D24CAFC58} NW3 7NL 1956000 2014-10-07 T E09000007 Camden 175.00 11177.143 marketed sale ## 2: {4EA5C667-79EF-4FF4-839D-5344F6F46842} NW2 2BT 3599000 2012-11-05 D E09000007 Camden 402.00 8952.736 rental (private) ## 3: {7EE393AB-3710-4D5D-AE60-7260ADFDEE54} NW3 7NL 1310000 2011-05-17 T E09000007 Camden 193.00 6787.565 marketed sale ## 4: {7E86B6FB-16FC-458C-E053-6B04A8C0C84C} NW3 7NL 2100000 2018-11-16 T E09000007 Camden 193.00 10880.829 marketed sale ## 5: {E33626A9-DCD2-4D65-AF98-33D8BC99D1FD} NW3 5PT 685000 2011-04-20 F E09000007 Camden 80.46 8513.547 marketed sale ## 6: {AFE46158-BA70-4FAF-999D-70D94F0322F9} WC1H 0LP 255000 2012-11-23 F E09000007 Camden 26.00 9807.692 marketed sale 4.2.4 Add in the ID column Camden[,tranid := .I] head(Camden) ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper transaction_type tranid ## 1: {CF95606A-595A-48F5-92CB-708D24CAFC58} NW3 7NL 1956000 2014-10-07 T E09000007 Camden 175.00 11177.143 marketed sale 1 ## 2: {4EA5C667-79EF-4FF4-839D-5344F6F46842} NW2 2BT 3599000 2012-11-05 D E09000007 Camden 402.00 8952.736 rental (private) 2 ## 3: {7EE393AB-3710-4D5D-AE60-7260ADFDEE54} NW3 7NL 1310000 2011-05-17 T E09000007 Camden 193.00 6787.565 marketed sale 3 ## 4: {7E86B6FB-16FC-458C-E053-6B04A8C0C84C} NW3 7NL 2100000 2018-11-16 T E09000007 Camden 193.00 10880.829 marketed sale 4 ## 5: {E33626A9-DCD2-4D65-AF98-33D8BC99D1FD} NW3 5PT 685000 2011-04-20 F E09000007 Camden 80.46 8513.547 marketed sale 5 ## 6: {AFE46158-BA70-4FAF-999D-70D94F0322F9} WC1H 0LP 255000 2012-11-23 F E09000007 Camden 26.00 9807.692 marketed sale 6 #Camden[, tranid := .I+1000000] 4.2.5 Convert datatable values to uppercase Camden[, `:=`(tran_type = toupper(transaction_type))] head(Camden) ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper transaction_type tranid tran_type ## 1: {CF95606A-595A-48F5-92CB-708D24CAFC58} NW3 7NL 1956000 2014-10-07 T E09000007 Camden 175.00 11177.143 marketed sale 1 MARKETED SALE ## 2: {4EA5C667-79EF-4FF4-839D-5344F6F46842} NW2 2BT 3599000 2012-11-05 D E09000007 Camden 402.00 8952.736 rental (private) 2 RENTAL (PRIVATE) ## 3: {7EE393AB-3710-4D5D-AE60-7260ADFDEE54} NW3 7NL 1310000 2011-05-17 T E09000007 Camden 193.00 6787.565 marketed sale 3 MARKETED SALE ## 4: {7E86B6FB-16FC-458C-E053-6B04A8C0C84C} NW3 7NL 2100000 2018-11-16 T E09000007 Camden 193.00 10880.829 marketed sale 4 MARKETED SALE ## 5: {E33626A9-DCD2-4D65-AF98-33D8BC99D1FD} NW3 5PT 685000 2011-04-20 F E09000007 Camden 80.46 8513.547 marketed sale 5 MARKETED SALE ## 6: {AFE46158-BA70-4FAF-999D-70D94F0322F9} WC1H 0LP 255000 2012-11-23 F E09000007 Camden 26.00 9807.692 marketed sale 6 MARKETED SALE 4.2.6 Delete columns Camden[,transaction_type:=NULL] head(Camden) ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper tranid tran_type ## 1: {CF95606A-595A-48F5-92CB-708D24CAFC58} NW3 7NL 1956000 2014-10-07 T E09000007 Camden 175.00 11177.143 1 MARKETED SALE ## 2: {4EA5C667-79EF-4FF4-839D-5344F6F46842} NW2 2BT 3599000 2012-11-05 D E09000007 Camden 402.00 8952.736 2 RENTAL (PRIVATE) ## 3: {7EE393AB-3710-4D5D-AE60-7260ADFDEE54} NW3 7NL 1310000 2011-05-17 T E09000007 Camden 193.00 6787.565 3 MARKETED SALE ## 4: {7E86B6FB-16FC-458C-E053-6B04A8C0C84C} NW3 7NL 2100000 2018-11-16 T E09000007 Camden 193.00 10880.829 4 MARKETED SALE ## 5: {E33626A9-DCD2-4D65-AF98-33D8BC99D1FD} NW3 5PT 685000 2011-04-20 F E09000007 Camden 80.46 8513.547 5 MARKETED SALE ## 6: {AFE46158-BA70-4FAF-999D-70D94F0322F9} WC1H 0LP 255000 2012-11-23 F E09000007 Camden 26.00 9807.692 6 MARKETED SALE 4.2.7 Join datasets #epcdata&lt;-rbind(epcdata13,epcdata14) 4.2.8 Remove Duplicates dim(Camden) ## [1] 13779 11 unique(Camden) ## transactionid postcode price dateoftransfer propertytype laua lad11nm tfarea priceper tranid tran_type ## 1: {CF95606A-595A-48F5-92CB-708D24CAFC58} NW3 7NL 1956000 2014-10-07 T E09000007 Camden 175.00 11177.143 1 MARKETED SALE ## 2: {4EA5C667-79EF-4FF4-839D-5344F6F46842} NW2 2BT 3599000 2012-11-05 D E09000007 Camden 402.00 8952.736 2 RENTAL (PRIVATE) ## 3: {7EE393AB-3710-4D5D-AE60-7260ADFDEE54} NW3 7NL 1310000 2011-05-17 T E09000007 Camden 193.00 6787.565 3 MARKETED SALE ## 4: {7E86B6FB-16FC-458C-E053-6B04A8C0C84C} NW3 7NL 2100000 2018-11-16 T E09000007 Camden 193.00 10880.829 4 MARKETED SALE ## 5: {E33626A9-DCD2-4D65-AF98-33D8BC99D1FD} NW3 5PT 685000 2011-04-20 F E09000007 Camden 80.46 8513.547 5 MARKETED SALE ## --- ## 13775: {13521672-6024-48B3-BACE-B2CCD6280078} NW8 7ED 5610000 2015-07-17 F E09000007 Camden 240.00 23375.000 13775 MARKETED SALE ## 13776: {ED4810A9-BC16-49FF-9C6B-844F5E569704} NW8 7ED 6700000 2015-07-01 F E09000007 Camden 287.00 23344.948 13776 MARKETED SALE ## 13777: {EEDA2760-FB8A-4D56-96B2-A0934B38D6BB} NW8 7ED 9494000 2015-07-01 F E09000007 Camden 313.00 30332.268 13777 MARKETED SALE ## 13778: {773788C2-F00D-2CE4-E053-6C04A8C05E57} NW8 7ED 4000000 2018-09-07 F E09000007 Camden 145.00 27586.207 13778 MARKETED SALE ## 13779: {25EA59F9-FEAC-4D50-E050-A8C0630562D0} NW8 7ED 3725000 2015-09-30 F E09000007 Camden 145.00 25689.655 13779 MARKETED SALE dim(Camden) ## [1] 13779 11 4.2.9 Write files fwrite(Camden,&quot;Camden.csv&quot;) 4.3 Work with PostGIS database in R 4.3.1 Write files to PostGIS drv &lt;- dbDriver(&quot;PostgreSQL&quot;) con &lt;- dbConnect(drv, dbname = &quot;casa&quot;,port=5432, user=&quot;postgres&quot;,password=******) dbWriteTable(con, &quot;Camden&quot;,value=Camden, append = TRUE, row.names = FALSE) 4.3.2 Read files from PostGIS drv &lt;- dbDriver(&quot;PostgreSQL&quot;) con &lt;- dbConnect(drv, dbname = &quot;casa&quot;,port=5432, user=&quot;postgres&quot;,password=******) tran&lt;- dbGetQuery(con,&quot;select * from Camden&quot;) 4.4 Measure code performance 4.4.1 4.4.2 4.5 Execute R code in Alteryx "],["q-a.html", "Q &amp; A Thanks for your listening!", " Q &amp; A Thanks for your listening! "]]
